// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: summary.sql

package repo

import (
	"context"
	"time"
)

const getMonthlySummary = `-- name: GetMonthlySummary :one
SELECT
    COALESCE(SUM(CASE WHEN amount_minor > 0 THEN amount_minor ELSE 0 END), 0)::bigint AS inflow,
    COALESCE(SUM(CASE WHEN amount_minor < 0 THEN -amount_minor ELSE 0 END), 0)::bigint AS outflow,
    COALESCE(SUM(amount_minor), 0)::bigint AS net
FROM transactions
WHERE account_id = $1
  AND date_trunc('month', occurred_at) = date_trunc('month', $2::timestamptz)
`

type GetMonthlySummaryParams struct {
	AccountID int64
	Column2   time.Time
}

type GetMonthlySummaryRow struct {
	Inflow  int64
	Outflow int64
	Net     int64
}

func (q *Queries) GetMonthlySummary(ctx context.Context, arg GetMonthlySummaryParams) (GetMonthlySummaryRow, error) {
	row := q.db.QueryRow(ctx, getMonthlySummary, arg.AccountID, arg.Column2)
	var i GetMonthlySummaryRow
	err := row.Scan(&i.Inflow, &i.Outflow, &i.Net)
	return i, err
}
