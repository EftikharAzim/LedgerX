// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: exports.sql

package repo

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createExport = `-- name: CreateExport :one
INSERT INTO exports (user_id, month, status)
VALUES ($1, $2, 'pending')
RETURNING id, user_id, month, status, file_path, created_at, updated_at
`

type CreateExportParams struct {
	UserID int64
	Month  time.Time
}

func (q *Queries) CreateExport(ctx context.Context, arg CreateExportParams) (Export, error) {
	row := q.db.QueryRow(ctx, createExport, arg.UserID, arg.Month)
	var i Export
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Month,
		&i.Status,
		&i.FilePath,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getExportByID = `-- name: GetExportByID :one
SELECT id, user_id, month, status, file_path, created_at, updated_at FROM exports WHERE id = $1
`

func (q *Queries) GetExportByID(ctx context.Context, id int64) (Export, error) {
	row := q.db.QueryRow(ctx, getExportByID, id)
	var i Export
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Month,
		&i.Status,
		&i.FilePath,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTransactionsForMonth = `-- name: ListTransactionsForMonth :many
SELECT id, account_id, category_id, amount_minor, currency, occurred_at, note
FROM transactions
WHERE user_id = $1
  AND date_trunc('month', occurred_at) = date_trunc('month', $2::timestamptz)
ORDER BY occurred_at
`

type ListTransactionsForMonthParams struct {
	UserID  int64
	Column2 time.Time
}

type ListTransactionsForMonthRow struct {
	ID          int64
	AccountID   int64
	CategoryID  pgtype.Int8
	AmountMinor int64
	Currency    string
	OccurredAt  time.Time
	Note        pgtype.Text
}

func (q *Queries) ListTransactionsForMonth(ctx context.Context, arg ListTransactionsForMonthParams) ([]ListTransactionsForMonthRow, error) {
	rows, err := q.db.Query(ctx, listTransactionsForMonth, arg.UserID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTransactionsForMonthRow
	for rows.Next() {
		var i ListTransactionsForMonthRow
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.CategoryID,
			&i.AmountMinor,
			&i.Currency,
			&i.OccurredAt,
			&i.Note,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExportStatus = `-- name: UpdateExportStatus :exec
UPDATE exports
SET status = $2, file_path = $3, updated_at = now()
WHERE id = $1
`

type UpdateExportStatusParams struct {
	ID       int64
	Status   string
	FilePath pgtype.Text
}

func (q *Queries) UpdateExportStatus(ctx context.Context, arg UpdateExportStatusParams) error {
	_, err := q.db.Exec(ctx, updateExportStatus, arg.ID, arg.Status, arg.FilePath)
	return err
}
