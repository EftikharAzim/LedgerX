// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: idempotency.sql

package repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getIdempotency = `-- name: GetIdempotency :one
SELECT user_id, key, request_hash, status, response_json, created_at
FROM idempotency_keys
WHERE user_id = $1 AND key = $2
`

type GetIdempotencyParams struct {
	UserID int64
	Key    string
}

func (q *Queries) GetIdempotency(ctx context.Context, arg GetIdempotencyParams) (IdempotencyKey, error) {
	row := q.db.QueryRow(ctx, getIdempotency, arg.UserID, arg.Key)
	var i IdempotencyKey
	err := row.Scan(
		&i.UserID,
		&i.Key,
		&i.RequestHash,
		&i.Status,
		&i.ResponseJson,
		&i.CreatedAt,
	)
	return i, err
}

const markIdempotencySuccess = `-- name: MarkIdempotencySuccess :exec
UPDATE idempotency_keys
SET status = 'succeeded', response_json = $4
WHERE user_id = $1 AND key = $2 AND request_hash = $3
`

type MarkIdempotencySuccessParams struct {
	UserID       int64
	Key          string
	RequestHash  string
	ResponseJson pgtype.Text
}

func (q *Queries) MarkIdempotencySuccess(ctx context.Context, arg MarkIdempotencySuccessParams) error {
	_, err := q.db.Exec(ctx, markIdempotencySuccess,
		arg.UserID,
		arg.Key,
		arg.RequestHash,
		arg.ResponseJson,
	)
	return err
}

const upsertIdempotencyStart = `-- name: UpsertIdempotencyStart :one
INSERT INTO idempotency_keys (user_id, key, request_hash, status)
VALUES ($1, $2, $3, 'started')
ON CONFLICT (user_id, key) DO UPDATE
SET request_hash = EXCLUDED.request_hash
RETURNING user_id, key, request_hash, status, response_json, created_at
`

type UpsertIdempotencyStartParams struct {
	UserID      int64
	Key         string
	RequestHash string
}

func (q *Queries) UpsertIdempotencyStart(ctx context.Context, arg UpsertIdempotencyStartParams) (IdempotencyKey, error) {
	row := q.db.QueryRow(ctx, upsertIdempotencyStart, arg.UserID, arg.Key, arg.RequestHash)
	var i IdempotencyKey
	err := row.Scan(
		&i.UserID,
		&i.Key,
		&i.RequestHash,
		&i.Status,
		&i.ResponseJson,
		&i.CreatedAt,
	)
	return i, err
}
