// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: accounts.sql

package repo

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (user_id, name, currency)
VALUES ($1, $2, $3)
RETURNING id, user_id, name, currency, is_active, created_at
`

type CreateAccountParams struct {
	UserID   int64
	Name     string
	Currency string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.UserID, arg.Name, arg.Currency)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Currency,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const deactivateAccount = `-- name: DeactivateAccount :exec
UPDATE accounts SET is_active = FALSE WHERE id = $1
`

func (q *Queries) DeactivateAccount(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deactivateAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, user_id, name, currency, is_active, created_at
FROM accounts
WHERE id = $1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRow(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Currency,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const listAccountsByUser = `-- name: ListAccountsByUser :many
SELECT id, user_id, name, currency, is_active, created_at
FROM accounts
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListAccountsByUserParams struct {
	UserID int64
	Limit  int32
	Offset int32
}

func (q *Queries) ListAccountsByUser(ctx context.Context, arg ListAccountsByUserParams) ([]Account, error) {
	rows, err := q.db.Query(ctx, listAccountsByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Currency,
			&i.IsActive,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
