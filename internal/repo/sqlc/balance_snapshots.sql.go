// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: balance_snapshots.sql

package repo

import (
	"context"
	"time"
)

const getLatestSnapshot = `-- name: GetLatestSnapshot :one
SELECT id, account_id, as_of_date, balance_minor, created_at
FROM balance_snapshots
WHERE account_id = $1
ORDER BY as_of_date DESC
LIMIT 1
`

func (q *Queries) GetLatestSnapshot(ctx context.Context, accountID int64) (BalanceSnapshot, error) {
	row := q.db.QueryRow(ctx, getLatestSnapshot, accountID)
	var i BalanceSnapshot
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AsOfDate,
		&i.BalanceMinor,
		&i.CreatedAt,
	)
	return i, err
}

const getSnapshotOnDate = `-- name: GetSnapshotOnDate :one
SELECT id, account_id, as_of_date, balance_minor, created_at
FROM balance_snapshots
WHERE account_id = $1 AND as_of_date = $2
`

type GetSnapshotOnDateParams struct {
	AccountID int64
	AsOfDate  time.Time
}

func (q *Queries) GetSnapshotOnDate(ctx context.Context, arg GetSnapshotOnDateParams) (BalanceSnapshot, error) {
	row := q.db.QueryRow(ctx, getSnapshotOnDate, arg.AccountID, arg.AsOfDate)
	var i BalanceSnapshot
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.AsOfDate,
		&i.BalanceMinor,
		&i.CreatedAt,
	)
	return i, err
}

const sumTransactionsSince = `-- name: SumTransactionsSince :one
SELECT COALESCE(SUM(amount_minor)::bigint, 0) AS delta
FROM transactions
WHERE account_id = $1
  AND occurred_at > $2
`

type SumTransactionsSinceParams struct {
	AccountID int64
	Since     time.Time
}

func (q *Queries) SumTransactionsSince(ctx context.Context, arg SumTransactionsSinceParams) (interface{}, error) {
	row := q.db.QueryRow(ctx, sumTransactionsSince, arg.AccountID, arg.Since)
	var delta interface{}
	err := row.Scan(&delta)
	return delta, err
}

const upsertBalanceSnapshot = `-- name: UpsertBalanceSnapshot :exec
INSERT INTO balance_snapshots (account_id, as_of_date, balance_minor)
VALUES ($1, $2, $3)
ON CONFLICT (account_id, as_of_date)
DO UPDATE SET balance_minor = EXCLUDED.balance_minor
`

type UpsertBalanceSnapshotParams struct {
	AccountID    int64
	AsOfDate     time.Time
	BalanceMinor int64
}

func (q *Queries) UpsertBalanceSnapshot(ctx context.Context, arg UpsertBalanceSnapshotParams) error {
	_, err := q.db.Exec(ctx, upsertBalanceSnapshot, arg.AccountID, arg.AsOfDate, arg.BalanceMinor)
	return err
}
