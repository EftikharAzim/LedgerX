// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: transactions.sql

package repo

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (user_id, account_id, amount_minor, currency, category, occurred_at, note)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, user_id, account_id, amount_minor, currency, category, occurred_at, note, created_at
`

type CreateTransactionParams struct {
	UserID      int64
	AccountID   int64
	AmountMinor int64
	Currency    string
	Category    pgtype.Text
	OccurredAt  time.Time
	Note        pgtype.Text
}

type CreateTransactionRow struct {
	ID          int64
	UserID      int64
	AccountID   int64
	AmountMinor int64
	Currency    string
	Category    pgtype.Text
	OccurredAt  time.Time
	Note        pgtype.Text
	CreatedAt   time.Time
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (CreateTransactionRow, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.UserID,
		arg.AccountID,
		arg.AmountMinor,
		arg.Currency,
		arg.Category,
		arg.OccurredAt,
		arg.Note,
	)
	var i CreateTransactionRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccountID,
		&i.AmountMinor,
		&i.Currency,
		&i.Category,
		&i.OccurredAt,
		&i.Note,
		&i.CreatedAt,
	)
	return i, err
}

const listTransactionsByAccount = `-- name: ListTransactionsByAccount :many
SELECT id, user_id, account_id, amount_minor, currency, category, occurred_at, note, created_at
FROM transactions
WHERE user_id = $1 AND account_id = $2
ORDER BY occurred_at DESC, id DESC
LIMIT $3 OFFSET $4
`

type ListTransactionsByAccountParams struct {
	UserID    int64
	AccountID int64
	Limit     int32
	Offset    int32
}

type ListTransactionsByAccountRow struct {
	ID          int64
	UserID      int64
	AccountID   int64
	AmountMinor int64
	Currency    string
	Category    pgtype.Text
	OccurredAt  time.Time
	Note        pgtype.Text
	CreatedAt   time.Time
}

func (q *Queries) ListTransactionsByAccount(ctx context.Context, arg ListTransactionsByAccountParams) ([]ListTransactionsByAccountRow, error) {
	rows, err := q.db.Query(ctx, listTransactionsByAccount,
		arg.UserID,
		arg.AccountID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTransactionsByAccountRow
	for rows.Next() {
		var i ListTransactionsByAccountRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AccountID,
			&i.AmountMinor,
			&i.Currency,
			&i.Category,
			&i.OccurredAt,
			&i.Note,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
