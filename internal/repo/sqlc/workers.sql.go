// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: workers.sql

package repo

import (
	"context"
	"time"
)

const listAllAccountIDs = `-- name: ListAllAccountIDs :many
SELECT id FROM accounts WHERE is_active = TRUE ORDER BY id
`

func (q *Queries) ListAllAccountIDs(ctx context.Context) ([]int64, error) {
	rows, err := q.db.Query(ctx, listAllAccountIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const sumTransactionsUpTo = `-- name: SumTransactionsUpTo :one
SELECT COALESCE(SUM(amount_minor)::bigint, 0) AS total
FROM transactions
WHERE account_id = $1
  AND occurred_at <= $2
`

type SumTransactionsUpToParams struct {
	AccountID int64
	Cutoff    time.Time
}

func (q *Queries) SumTransactionsUpTo(ctx context.Context, arg SumTransactionsUpToParams) (interface{}, error) {
	row := q.db.QueryRow(ctx, sumTransactionsUpTo, arg.AccountID, arg.Cutoff)
	var total interface{}
	err := row.Scan(&total)
	return total, err
}
